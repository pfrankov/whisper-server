import Cocoa
import SwiftUI

// –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class IconGenerator {
    private let outputDirectory: String
    
    init(outputDirectory: String) {
        self.outputDirectory = outputDirectory
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        let fileManager = FileManager.default
        if !fileManager.fileExists(atPath: outputDirectory) {
            try? fileManager.createDirectory(atPath: outputDirectory, withIntermediateDirectories: true)
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–∏–∫–æ–Ω–∫–∏
    func generateIcons() {
        print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–∏–∫–æ–Ω–∫–∏...")
        
        // –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1024x1024 –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        guard let sourceImage = createSourceImage(size: NSSize(width: 1024, height: 1024)) else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        save(image: sourceImage, filename: "app_icon_master.png")
        
        // –°–æ–∑–¥–∞–µ–º Contents.json
        createContentsJson()
        
        print("‚úÖ –ú–∞—Å—Ç–µ—Ä-–∏–∫–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ \(outputDirectory)")
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func createSourceImage(size: NSSize) -> NSImage? {
        let image = NSImage(size: size)
        
        image.lockFocus()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        if NSGraphicsContext.current == nil {
            image.unlockFocus()
            return nil
        }
        
        // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ (–±–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Å–∏–Ω–∏–π –∏ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
        let gradient = NSGradient(colors: [
            NSColor(calibratedRed: 0.13, green: 0.18, blue: 0.35, alpha: 1), // #212958 (—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π)
            NSColor(calibratedRed: 0.24, green: 0.16, blue: 0.36, alpha: 1)  // #3D295C (—Ç–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
        ])
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        let rect = NSRect(x: 0, y: 0, width: size.width, height: size.height)
        let bezierPath = NSBezierPath(roundedRect: rect, xRadius: size.width * 0.25, yRadius: size.height * 0.25)
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        gradient?.draw(in: bezierPath, angle: 135)
        
        // –†–∏—Å—É–µ–º SF Symbol "waveform" –≤–º–µ—Å—Ç–æ emoji
        if let waveformImage = NSImage(systemSymbolName: "waveform", accessibilityDescription: nil) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ SF Symbol –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
            let configuration = NSImage.SymbolConfiguration(pointSize: size.width * 0.6, weight: .medium)
                .applying(NSImage.SymbolConfiguration(paletteColors: [.white])) // –Ø–≤–Ω–æ –∑–∞–¥–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            let configuredImage = waveformImage.withSymbolConfiguration(configuration) ?? waveformImage
            
            // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ template image –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            let templateImage = configuredImage.copy() as! NSImage
            templateImage.isTemplate = true
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º SF Symbol –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 60% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏)
            let iconSize = size.width * 0.6
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            let imageRect = NSRect(
                x: (size.width - iconSize) / 2,
                y: (size.height - iconSize) / 2,
                width: iconSize,
                height: iconSize
            )
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç –∫ –∏–∫–æ–Ω–∫–µ
            NSColor.white.set()
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            NSGraphicsContext.current?.imageInterpolation = .high
            
            // –†–∏—Å—É–µ–º template image —Å –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
            templateImage.draw(in: imageRect, from: .zero, operation: .sourceOver, fraction: 1.0)
            
            // –ï—Å–ª–∏ SF Symbol –≤—Å—ë –µ—â—ë –≤—ã–≥–ª—è–¥–∏—Ç —Ç—ë–º–Ω—ã–º, –¥—É–±–ª–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
            templateImage.draw(in: imageRect, from: .zero, operation: .plusLighter, fraction: 0.5)
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —Ä–∏—Å—É–µ–º –∑–≤—É–∫–æ–≤—É—é –≤–æ–ª–Ω—É –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ SF Symbol –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            drawCustomWaveform(in: NSGraphicsContext.current?.cgContext, size: size)
        }
        
        image.unlockFocus()
        
        return image
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    private func drawCustomWaveform(in context: CGContext?, size: NSSize) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏—Å—Ç–æ –±–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∏–π –∑–≤—É–∫–æ–≤–æ–π –≤–æ–ª–Ω—ã
        NSColor.white.setStroke()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–∏–Ω–∏–π
        let lineWidth: CGFloat = max(3.0, size.width * 0.015) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –¥–ª—è –ª—É—á—à–µ–π –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏
        let spacing: CGFloat = size.width * 0.04 // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏
        let centerX = size.width / 2
        let centerY = size.height / 2
        let maxHeight = size.height * 0.4 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω—ã
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–æ–ª–Ω—ã
        let barCount = 7 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
        let heights: [CGFloat] = [0.5, 0.8, 1.0, 0.7, 0.9, 0.6, 0.4] // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–æ—Ç—ã –ª–∏–Ω–∏–π
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
        let startX = centerX - (CGFloat(barCount) * spacing / 2)
        
        // –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é –ª–∏–Ω–∏—é
        for i in 0..<barCount {
            let barHeight = maxHeight * heights[i]
            let xPos = startX + (CGFloat(i) * spacing)
            
            // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é
            let path = NSBezierPath()
            path.lineWidth = lineWidth
            path.lineCapStyle = .round
            
            // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞ –ª–∏–Ω–∏–∏
            let topPoint = NSPoint(x: xPos, y: centerY + barHeight / 2)
            // –ù–∏–∂–Ω—è—è —Ç–æ—á–∫–∞ –ª–∏–Ω–∏–∏
            let bottomPoint = NSPoint(x: xPos, y: centerY - barHeight / 2)
            
            // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é
            path.move(to: topPoint)
            path.line(to: bottomPoint)
            path.stroke()
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    private func save(image: NSImage, filename: String) {
        guard let tiffData = image.tiffRepresentation,
              let bitmapImage = NSBitmapImageRep(data: tiffData),
              let pngData = bitmapImage.representation(using: .png, properties: [:]) else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG")
            return
        }
        
        let fileURL = URL(fileURLWithPath: outputDirectory).appendingPathComponent(filename)
        
        do {
            try pngData.write(to: fileURL)
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(filename)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ \(filename): \(error)")
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Contents.json –¥–ª—è AppIcon.appiconset
    private func createContentsJson() {
        var images: [[String: Any]] = []
        
        // 16x16
        images.append(createImageEntry(size: 16, scale: 1))
        images.append(createImageEntry(size: 16, scale: 2))
        
        // 32x32
        images.append(createImageEntry(size: 32, scale: 1))
        images.append(createImageEntry(size: 32, scale: 2))
        
        // 128x128
        images.append(createImageEntry(size: 128, scale: 1))
        images.append(createImageEntry(size: 128, scale: 2))
        
        // 256x256
        images.append(createImageEntry(size: 256, scale: 1))
        images.append(createImageEntry(size: 256, scale: 2))
        
        // 512x512
        images.append(createImageEntry(size: 512, scale: 1))
        images.append(createImageEntry(size: 512, scale: 2))
        
        // –°–æ–∑–¥–∞–µ–º JSON
        let contentsJson: [String: Any] = [
            "images": images,
            "info": [
                "author": "xcode",
                "version": 1
            ]
        ]
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
        guard let jsonData = try? JSONSerialization.data(withJSONObject: contentsJson, options: [.prettyPrinted]) else {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JSON-–¥–∞–Ω–Ω—ã—Ö")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        let fileURL = URL(fileURLWithPath: outputDirectory).appendingPathComponent("Contents.json")
        
        do {
            try jsonData.write(to: fileURL)
            print("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª Contents.json")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Contents.json: \(error)")
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏ –≤ Contents.json
    private func createImageEntry(size: Int, scale: Int) -> [String: Any] {
        let filename = "app_icon_\(size)x\(size)\(scale == 2 ? "@2x" : "").png"
        
        return [
            "filename": filename,
            "idiom": "mac",
            "scale": "\(scale)x",
            "size": "\(size)x\(size)"
        ]
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –ø—É—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
func main() {
    guard CommandLine.arguments.count > 1 else {
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: swift GenerateAppIcon.swift /–ø—É—Ç—å/–∫/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏/AppIcon.appiconset")
        exit(1)
    }
    
    let assetCatalogPath = CommandLine.arguments[1]
    print("üìÇ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫: \(assetCatalogPath)")
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∫–æ–Ω–æ–∫
    let iconGenerator = IconGenerator(outputDirectory: assetCatalogPath)
    iconGenerator.generateIcons()
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main() 