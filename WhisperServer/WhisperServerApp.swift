//
//  WhisperServerApp.swift
//  WhisperServer
//
//  Created by Frankov Pavel on 24.03.2025.
//

import SwiftUI
#if os(macOS) || os(iOS)
import Metal
#endif

@main
struct WhisperServerApp: App {
    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    var body: some Scene {
        Settings {
            EmptyView()
        }
    }
}

/// Application delegate that manages the HTTP server and menu bar integration
final class AppDelegate: NSObject, NSApplicationDelegate {
    // MARK: - Properties
    
    /// Menu bar item
    private var statusItem: NSStatusItem!
    
    /// HTTP server instance
    private var httpServer: SimpleHTTPServer?
    
    /// The port the server listens on
    private let serverPort: UInt16 = 8888
    
    // MARK: - Application Lifecycle
    
    func applicationDidFinishLaunching(_ notification: Notification) {
        // Make app appear only in menu bar (no dock icon)
        NSApp.setActivationPolicy(.accessory)
        
        #if os(macOS) || os(iOS)
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Metal
        preloadMetalLibraries()
        #endif
        
        setupStatusItem()
        startServer()
    }
    
    func applicationWillTerminate(_ notification: Notification) {
        stopServer()
        WhisperTranscriptionService.cleanup()
    }
    
    // MARK: - Private Methods
    
    /// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Metal
    private func preloadMetalLibraries() {
        #if os(macOS) || os(iOS)
        DispatchQueue.global(qos: .userInitiated).async {
            print("üîÑ Preloading Metal libraries...")
            
            // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Metal –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            let device = MTLCreateSystemDefaultDevice()
            if let _ = device {
                print("‚úÖ Metal device initialized")
                
                // –í macOS Sonoma+ –¥–æ—Å—Ç—É–ø–µ–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π API –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —à–µ–π–¥–µ—Ä–æ–≤
                if #available(macOS 14.0, iOS 17.0, *) {
                    print("üîÑ Using enhanced Metal shader caching on macOS Sonoma+")
                }
            } else {
                print("‚ö†Ô∏è Metal is not available on this device")
            }
        }
        #endif
    }
    
    /// Sets up the status item in the menu bar
    private func setupStatusItem() {
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.squareLength)
        
        if let button = statusItem.button {
            button.image = NSImage(systemSymbolName: "waveform", accessibilityDescription: "Whisper Server")
            button.toolTip = "WhisperServer running on port \(serverPort)"
        }
        
        let menu = NSMenu()
        menu.addItem(withTitle: "Server running on port \(serverPort)", action: nil, keyEquivalent: "")
        menu.addItem(NSMenuItem.separator())
        menu.addItem(withTitle: "Quit", action: #selector(quitApp), keyEquivalent: "q")
        
        statusItem.menu = menu
    }
    
    /// Starts the HTTP server
    private func startServer() {
        httpServer = SimpleHTTPServer(port: serverPort)
        httpServer?.start()
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.global(qos: .userInitiated).async {
            print("üîÑ Preloading Whisper model...")
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            let silenceData = Data(repeating: 0, count: 1024)
            WhisperTranscriptionService.transcribeAudioData(silenceData)
        }
    }
    
    /// Stops the HTTP server
    private func stopServer() {
        httpServer?.stop()
        httpServer = nil
    }
    
    // MARK: - Actions
    
    @objc private func quitApp() {
        NSApp.terminate(self)
    }
}

