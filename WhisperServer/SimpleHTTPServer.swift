//
//  SimpleHTTPServer.swift
//  WhisperServer
//
//  Created by Frankov Pavel on 24.03.2025.
//

import Foundation
import Network

/// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper API –∑–∞–ø—Ä–æ—Å–æ–≤
final class SimpleHTTPServer {
    // MARK: - Types
    
    /// –§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ API
    private enum ResponseFormat: String {
        case json, text, srt, vtt, verbose_json
        
        static func from(string: String?) -> ResponseFormat {
            guard let string = string, !string.isEmpty else { return .json }
            return ResponseFormat(rawValue: string) ?? .json
        }
    }
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ Whisper API
    private struct WhisperAPIRequest {
        var audioData: Data?
        var prompt: String?
        var responseFormat: ResponseFormat = .json
        var temperature: Double = 0.0
        var language: String?
        
        var isValid: Bool {
            return audioData != nil && !audioData!.isEmpty
        }
    }
    
    // MARK: - Properties
    
    /// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    private let port: UInt16
    
    /// –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    private(set) var isRunning = false
    
    /// –°–µ—Ç–µ–≤–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private var listener: NWListener?
    
    /// –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–∞
    private let serverQueue = DispatchQueue(label: "com.whisperserver.server", qos: .userInitiated)
    
    // MARK: - Initialization
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    /// - Parameter port: –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    init(port: UInt16) {
        self.port = port
    }
    
    deinit {
        stop()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä
    func start() {
        guard !isRunning else { return }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞
        let maxRetries = 3
        var retryCount = 0
        var lastError: Error?
        
        func tryStartServer() {
            do {
                // –°–æ–∑–¥–∞–µ–º TCP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                let parameters = NWParameters.tcp
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                parameters.allowLocalEndpointReuse = true  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç –±—ã—Å—Ç—Ä–µ–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç
                parameters.requiredInterfaceType = .loopback  // –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç –∏–∑ UInt16
                let port = NWEndpoint.Port(rawValue: self.port)!
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –ø–æ—Ä—Ç–æ–º
                listener = try NWListener(using: parameters, on: port)
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                configureStateHandler()
                configureConnectionHandler()
                
                // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                listener?.start(queue: serverQueue)
                
            } catch {
                lastError = error
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä: \(error.localizedDescription)")
                
                // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫
                if retryCount < maxRetries {
                    retryCount += 1
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (\(retryCount)/\(maxRetries)) —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                    
                    DispatchQueue.global().asyncAfter(deadline: .now() + 2) {
                        tryStartServer()
                    }
                } else {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ \(maxRetries) –ø–æ–ø—ã—Ç–æ–∫: \(error.localizedDescription)")
                }
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É
        tryStartServer()
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä
    func stop() {
        guard isRunning else { return }
        
        isRunning = false
        listener?.cancel()
        listener = nil
        print("üõë HTTP-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª—è
    private func configureStateHandler() {
        listener?.stateUpdateHandler = { [weak self] state in
            guard let self = self else { return }
            
            switch state {
            case .ready:
                self.isRunning = true
                print("‚úÖ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:\(self.port)")
                print("   Whisper API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:\(self.port)/v1/audio/transcriptions")
                
            case .failed(let error):
                print("‚ùå HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: \(error.localizedDescription)")
                self.stop()
                
            case .cancelled:
                self.isRunning = false
                
            default:
                break
            }
        }
    }
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private func configureConnectionHandler() {
        listener?.newConnectionHandler = { [weak self] connection in
            guard let self = self else { return }
            self.handleConnection(connection)
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    /// - Parameter connection: –ù–æ–≤–æ–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    private func handleConnection(_ connection: NWConnection) {
        print("üì• –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (50 –ú–ë –¥–ª—è –±–æ–ª—å—à–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤)
        let maxRequestSize = 50 * 1024 * 1024
        
        // –°—Ç–∞—Ä—Ç—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection.start(queue: serverQueue)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        connection.receive(minimumIncompleteLength: 1, maximumLength: maxRequestSize) { [weak self] data, _, isComplete, error in
            guard let self = self else { return }
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 
            // defer {
            //     connection.cancel()
            // }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
                connection.cancel()
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
            guard let data = data, !data.isEmpty else {
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                self.sendDefaultResponse(to: connection)
                return
            }
            
            print("üì• –ü–æ–ª—É—á–µ–Ω–æ \(data.count) –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
            if data.count > maxRequestSize {
                print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (\(maxRequestSize / 1024 / 1024) MB)")
                self.sendErrorResponse(to: connection, message: "–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
                return
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞
            if let request = self.parseHTTPRequest(data: data) {
                self.routeRequest(connection: connection, request: request)
            } else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å")
                self.sendDefaultResponse(to: connection)
            }
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    /// –†–∞–∑–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞
    /// - Parameter data: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    /// - Returns: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ nil, –µ—Å–ª–∏ —Ä–∞–∑–±–æ—Ä –Ω–µ —É–¥–∞–ª—Å—è
    private func parseHTTPRequest(data: Data) -> [String: Any]? {
        print("üîç –ü–æ–ª—É—á–µ–Ω HTTP-–∑–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–æ–º \(data.count) –±–∞–π—Ç")
        
        // –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ç–µ–ª–æ–º (–¥–≤–æ–π–Ω–æ–π CRLF: \r\n\r\n)
        let doubleCRLF = Data([0x0D, 0x0A, 0x0D, 0x0A]) // \r\n\r\n –≤ –≤–∏–¥–µ –¥–∞–Ω–Ω—ã—Ö
        
        // –ò—â–µ–º –≥—Ä–∞–Ω–∏—Ü—É –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ç–µ–ª–æ–º
        guard let headerEndIndex = find(pattern: doubleCRLF, in: data) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—É –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞")
            return nil
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
        let headersData = data.prefix(headerEndIndex)
        
        // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ UTF-8 (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ)
        guard let headersString = String(data: headersData, encoding: .utf8) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ UTF-8")
            return nil
        }
        
        print("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:\n\(headersString)")
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        let lines = headersString.components(separatedBy: "\r\n")
        guard !lines.isEmpty else {
            print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫")
            return nil
        }
        
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        let requestLine = lines[0].components(separatedBy: " ")
        guard requestLine.count >= 3 else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: \(lines[0])")
            return nil
        }
        
        let method = requestLine[0]
        let path = requestLine[1]
        
        print("üìã –ú–µ—Ç–æ–¥: \(method), –ü—É—Ç—å: \(path)")
        
        // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        var headers: [String: String] = [:]
        
        for i in 1..<lines.count {
            let line = lines[i]
            if line.isEmpty { continue } // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            
            let headerComponents = line.components(separatedBy: ": ")
            if headerComponents.count >= 2 {
                let key = headerComponents[0]
                let value = headerComponents.dropFirst().joined(separator: ": ")
                headers[key] = value
                print("üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: \(key): \(value)")
            } else {
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: \(line)")
            }
        }
        
        // –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ—Å–ª–µ –¥–≤–æ–π–Ω–æ–≥–æ CRLF)
        let bodyStartIndex = headerEndIndex + doubleCRLF.count
        let body = data.count > bodyStartIndex ? data.subdata(in: bodyStartIndex..<data.count) : Data()
        
        print("‚úÖ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: \(body.count) –±–∞–π—Ç")
        
        // –î–ª—è multipart/form-data –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ boundary
        if let contentType = headers["Content-Type"], 
           contentType.starts(with: "multipart/form-data") {
            
            print("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω multipart/form-data –∑–∞–ø—Ä–æ—Å")
            
            // –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç boundary, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            if !contentType.contains("boundary=") {
                print("‚ö†Ô∏è –í Content-Type –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç boundary, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                
                // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π boundary –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–ª–∞ (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å --)
                if body.count > 2, body[0] == 0x2D, body[1] == 0x2D { // "--" –≤ ASCII
                    // –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ —Å boundary
                    if let boundaryEndIndex = find(pattern: Data([0x0D, 0x0A]), in: body) {
                        let potentialBoundary = body.prefix(boundaryEndIndex)
                        if let boundaryString = String(data: potentialBoundary, encoding: .utf8) {
                            // –£–¥–∞–ª—è–µ–º -- –≤ –Ω–∞—á–∞–ª–µ
                            let boundary = boundaryString.dropFirst(2)
                            let newContentType = "\(contentType); boundary=\(boundary)"
                            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω boundary: \(boundary)")
                            headers["Content-Type"] = newContentType
                        }
                    }
                }
            }
        }
        
        return [
            "method": method,
            "path": path,
            "headers": headers,
            "body": body
        ]
    }
    
    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    /// - Parameters:
    ///   - pattern: –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    ///   - data: –î–∞–Ω–Ω—ã–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–∫–∞—Ç—å
    /// - Returns: –ò–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ nil, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    private func find(pattern: Data, in data: Data) -> Int? {
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        guard !pattern.isEmpty, !data.isEmpty, pattern.count <= data.count else { 
            return nil 
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
        // –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (KMP, Boyer-Moore)
        let patternLength = pattern.count
        let dataLength = data.count
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π –∏–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —à–∞–±–ª–æ–Ω
        let lastPossibleIndex = dataLength - patternLength
        
        for i in 0...lastPossibleIndex {
            var matched = true
            
            for j in 0..<patternLength {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
                guard i + j < dataLength else {
                    matched = false
                    break
                }
                
                if data[i + j] != pattern[j] {
                    matched = false
                    break
                }
            }
            
            if matched {
                return i
            }
        }
        
        return nil
    }
    
    /// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - request: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å
    private func routeRequest(connection: NWConnection, request: [String: Any]) {
        guard 
            let method = request["method"] as? String,
            let path = request["path"] as? String
        else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥ –∏–ª–∏ –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞")
            sendDefaultResponse(to: connection)
            return
        }
        
        print("üì• –ü–æ–ª—É—á–µ–Ω \(method) –∑–∞–ø—Ä–æ—Å: \(path)")
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let normalizedPath = path.lowercased().trimmingCharacters(in: .whitespacesAndNewlines)
        print("üîç –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å: \(normalizedPath)")
        
        if normalizedPath.hasSuffix("/v1/audio/transcriptions") || normalizedPath == "/v1/audio/transcriptions" {
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            handleTranscriptionRequest(connection: connection, request: request)
        } else {
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É—Ç—å: \(path)")
            sendDefaultResponse(to: connection)
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - request: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å
    private func handleTranscriptionRequest(connection: NWConnection, request: [String: Any]) {
        guard 
            let headers = request["headers"] as? [String: String],
            let body = request["body"] as? Data
        else {
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
            sendErrorResponse(to: connection, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        }
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
        let bodyMB = Double(body.count) / 1024.0 / 1024.0
        print("üìä –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: \(body.count) –±–∞–π—Ç (\(String(format: "%.2f", bodyMB)) MB)")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if body.count < 100 {
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–µ (\(body.count) –±–∞–π—Ç)")
            sendErrorResponse(to: connection, message: "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω")
            return
        }
        
        if body.count > 100 * 1024 * 1024 { // > 100 MB
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (\(String(format: "%.2f", bodyMB)) MB)")
            sendErrorResponse(to: connection, message: "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ - 100 MB")
            return
        }
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
        print("üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
        for (key, value) in headers {
            print("   \(key): \(value)")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        let contentTypeHeader = headers["Content-Type"] ?? ""
        print("üìã Content-Type: \(contentTypeHeader)")
        
        // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        let startTime = Date()
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        var whisperRequest: WhisperAPIRequest
        
        if contentTypeHeader.starts(with: "multipart/form-data") {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ multipart/form-data
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ multipart/form-data...")
            whisperRequest = parseMultipartFormData(data: body, contentType: contentTypeHeader)
            
            // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            if !whisperRequest.isValid && body.count > 0 {
                print("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
                whisperRequest = parseAudioDataDirectly(from: body, contentType: contentTypeHeader)
            }
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–µ–ª–æ –∫–∞–∫ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
            print("‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–ª–æ –∫–∞–∫ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é")
            var request = WhisperAPIRequest()
            request.audioData = body
            whisperRequest = request
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
        let parsingTime = Date().timeIntervalSince(startTime)
        print("‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞: \(String(format: "%.2f", parsingTime)) —Å–µ–∫—É–Ω–¥")
        
        if whisperRequest.isValid {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–ª–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (10 –º–∏–Ω—É—Ç)
            let timeoutDispatchItem = DispatchWorkItem {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if case .cancelled = connection.state {
                    return // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ
                }
                
                if case .failed(_) = connection.state {
                    return // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –≤ –æ—à–∏–±–∫–µ
                }
                
                print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (10 –º–∏–Ω—É—Ç), –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å")
                self.sendErrorResponse(to: connection, message: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 600, execute: timeoutDispatchItem)
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Whisper
            DispatchQueue.global(qos: .userInitiated).async { [weak self] in
                guard let self = self else { 
                    timeoutDispatchItem.cancel()
                    return 
                }
                
                let transcriptionStartTime = Date()
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
                if let audioData = whisperRequest.audioData {
                    let sizeMB = Double(audioData.count) / 1024.0 / 1024.0
                    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ —Ä–∞–∑–º–µ—Ä–æ–º \(audioData.count) –±–∞–π—Ç (\(String(format: "%.2f", sizeMB)) MB)")
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                    if audioData.count < 1000 {
                        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±—Ä–µ–∑–∞–Ω—ã")
                    } else {
                        print("‚úÖ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º")
                    }
                } else {
                    print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–ª–∏ nil, —Ö–æ—Ç—è –ø—Ä–æ–≤–µ—Ä–∫–∞ isValid –±—ã–ª–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–ª–∞—Å—Å WhisperTester –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
                let transcription = WhisperTester.transcribeAudioData(
                    whisperRequest.audioData!,
                    language: whisperRequest.language,
                    prompt: whisperRequest.prompt
                )
                
                // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                timeoutDispatchItem.cancel()
                
                // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                let transcriptionTime = Date().timeIntervalSince(transcriptionStartTime)
                print("‚è±Ô∏è –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(String(format: "%.2f", transcriptionTime)) —Å–µ–∫—É–Ω–¥")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –µ—â—ë —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                if case .cancelled = connection.state {
                    print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    return
                }
                
                if case .failed(_) = connection.state {
                    print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ—à–∏–±–æ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    return
                }
                
                DispatchQueue.main.async {
                    if let transcription = transcription {
                        let previewLength = min(100, transcription.count)
                        let previewText = transcription.prefix(previewLength)
                        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: \"\(previewText)...\" (\(transcription.count) —Å–∏–º–≤–æ–ª–æ–≤)")
                        self.sendTranscriptionResponse(
                            to: connection,
                            format: whisperRequest.responseFormat,
                            text: transcription,
                            temperature: whisperRequest.temperature
                        )
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
                        self.sendErrorResponse(
                            to: connection,
                            message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
                        )
                    }
                    
                    // –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                    let totalTime = Date().timeIntervalSince(startTime)
                    print("‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: \(String(format: "%.2f", totalTime)) —Å–µ–∫—É–Ω–¥")
                }
            }
        } else {
            print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            sendErrorResponse(to: connection, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        }
    }
    
    /// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    /// - Parameters:
    ///   - body: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    ///   - contentType: –ó–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type
    /// - Returns: –ó–∞–ø—Ä–æ—Å WhisperAPI —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    private func parseAudioDataDirectly(from body: Data, contentType: String) -> WhisperAPIRequest {
        var request = WhisperAPIRequest()
        
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–µ–ª–∞ —Ä–∞–∑–º–µ—Ä–æ–º \(body.count) –±–∞–π—Ç")
        
        // –ò—â–µ–º WAV-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (RIFF)
        func findWavHeader(in data: Data) -> Int? {
            // WAV –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "RIFF"
            let riffSignature = Data([0x52, 0x49, 0x46, 0x46]) // "RIFF" –≤ ASCII
            return find(pattern: riffSignature, in: data)
        }
        
        // –ò—â–µ–º MP3-–∑–∞–≥–æ–ª–æ–≤–æ–∫ (ID3 –∏–ª–∏ MPEG frame sync)
        func findMp3Header(in data: Data) -> Int? {
            // ID3 —Ç—ç–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "ID3"
            let id3Signature = Data([0x49, 0x44, 0x33]) // "ID3" –≤ ASCII
            
            // MPEG frame sync –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0xFF 0xFB –∏–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö –±–∞–π—Ç–æ–≤
            let mpegFrameSync = Data([0xFF, 0xFB])
            
            if let id3Position = find(pattern: id3Signature, in: data) {
                return id3Position
            }
            
            return find(pattern: mpegFrameSync, in: data)
        }
        
        // –ü–æ–∏—Å–∫ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
        var audioStart: Int? = nil
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WAV-–∑–∞–≥–æ–ª–æ–≤–∫–∞
        if let wavPos = findWavHeader(in: body) {
            print("‚úÖ –ù–∞–π–¥–µ–Ω WAV-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ \(wavPos)")
            audioStart = wavPos
        } 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MP3-–∑–∞–≥–æ–ª–æ–≤–∫–∞
        else if let mp3Pos = findMp3Header(in: body) {
            print("‚úÖ –ù–∞–π–¥–µ–Ω MP3-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ \(mp3Pos)")
            audioStart = mp3Pos
        }
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Å—ë —Ç–µ–ª–æ - –∞—É–¥–∏–æ
        else if body.count > 1000 {
            print("‚ö†Ô∏è –ê—É–¥–∏–æ–∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å—ë —Ç–µ–ª–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—É–¥–∏–æ")
            audioStart = 0
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö
        if let start = audioStart {
            request.audioData = body.subdata(in: start..<body.count)
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–æ–º \(request.audioData?.count ?? 0) –±–∞–π—Ç")
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            request.responseFormat = .json
        }
        
        return request
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data
    
    /// –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ multipart/form-data
    /// - Parameters:
    ///   - data: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ multipart –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    ///   - contentType: –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Type
    /// - Returns: WhisperAPIRequest, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    private func parseMultipartFormData(data: Data, contentType: String) -> WhisperAPIRequest {
        var request = WhisperAPIRequest()
        
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–æ—Ä multipart/form-data —Ä–∞–∑–º–µ—Ä–æ–º \(data.count) –±–∞–π—Ç")
        
        // –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –¥–∞–Ω–Ω—ã—Ö –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        if data.count > 50 {
            let previewBytes = data.prefix(50)
            let hexString = previewBytes.map { String(format: "%02x", $0) }.joined(separator: " ")
            print("üîç –ü–µ—Ä–≤—ã–µ 50 –±–∞–π—Ç: \(hexString)")
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∏–∑ Content-Type
        let boundaryComponents = contentType.components(separatedBy: "boundary=")
        guard boundaryComponents.count > 1 else {
            print("‚ùå –ì—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Content-Type: \(contentType)")
            return request
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º boundary, —É–¥–∞–ª—è—è –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        var boundary = boundaryComponents[1]
        if boundary.contains(";") {
            boundary = boundary.components(separatedBy: ";")[0]
        }
        if boundary.hasPrefix("\"") && boundary.hasSuffix("\"") {
            boundary = String(boundary.dropFirst().dropLast())
        }
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞: \(boundary)")
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –∏ –∫–æ–Ω–µ—á–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ
        // –í–ê–ñ–ù–û: —Ñ–æ—Ä–º–∞—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–µ–ª–µ: "--boundary" (–±–µ–∑ \r\n!)
        let fullBoundaryString = "--\(boundary)"
        let endBoundaryString = "--\(boundary)--"
        
        guard let fullBoundary = fullBoundaryString.data(using: .utf8),
              let endBoundary = endBoundaryString.data(using: .utf8) else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ")
            return request
        }
        
        print("üîç –ü–æ–ª–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: \(fullBoundaryString)")
        print("üîç –ö–æ–Ω–µ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: \(endBoundaryString)")
        
        // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∏—Å–∫ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –ø–µ—Ä–≤—ã—Ö 100 –±–∞–π—Ç–∞—Ö
        if data.count > 100 {
            let searchRange = data.prefix(100)
            if let firstBoundaryPos = find(pattern: fullBoundary, in: searchRange) {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ \(firstBoundaryPos)")
                
                // –í—ã–≤–æ–¥–∏–º 10 –±–∞–π—Ç –¥–æ –∏ –ø–æ—Å–ª–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                let startIdx = max(0, firstBoundaryPos - 10)
                let endIdx = min(searchRange.count, firstBoundaryPos + fullBoundary.count + 10)
                let contextData = searchRange.subdata(in: startIdx..<endIdx)
                let hexContext = contextData.map { String(format: "%02x", $0) }.joined(separator: " ")
                print("üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –≥—Ä–∞–Ω–∏—Ü—ã: \(hexContext)")
            } else {
                print("‚ùå –ì—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–≤—ã—Ö 100 –±–∞–π—Ç–∞—Ö")
            }
        }
        
        // –ò—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        var boundaryPositions: [Int] = []
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–µ—Ä–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
        if let firstPosition = find(pattern: fullBoundary, in: data) {
            boundaryPositions.append(firstPosition)
            
            // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
            var currentPosition = firstPosition + fullBoundary.count
            
            while currentPosition < data.count - fullBoundary.count {
                if let nextPosition = find(pattern: fullBoundary, in: data.subdata(in: currentPosition..<data.count)) {
                    let absolutePosition = currentPosition + nextPosition
                    boundaryPositions.append(absolutePosition)
                    currentPosition = absolutePosition + fullBoundary.count
                } else {
                    break
                }
            }
        }
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
        if let endBoundaryPosition = find(pattern: endBoundary, in: data) {
            boundaryPositions.append(endBoundaryPosition)
        }
        
        print("üîç –ù–∞–π–¥–µ–Ω–æ \(boundaryPositions.count) –≥—Ä–∞–Ω–∏—Ü –≤ –¥–∞–Ω–Ω—ã—Ö: \(boundaryPositions)")
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä–∞–Ω–∏—Ü, –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
        if boundaryPositions.isEmpty {
            print("‚ùå –ì—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
            return request
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        for i in 0..<(boundaryPositions.count - 1) {
            // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —á–∞—Å—Ç–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∏ CRLF –ø–æ—Å–ª–µ –Ω–µ—ë)
            let partStart = boundaryPositions[i] + fullBoundary.count + 2 // +2 –¥–ª—è \r\n –ø–æ—Å–ª–µ –≥—Ä–∞–Ω–∏—Ü—ã
            let partEnd = boundaryPositions[i + 1]
            
            if partStart >= partEnd || partStart >= data.count {
                print("‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —á–∞—Å—Ç—å –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ \(i) –∏ \(i+1): \(partStart) - \(partEnd)")
                continue
            }
            
            let partData = data.subdata(in: partStart..<partEnd)
            print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ #\(i+1) —Ä–∞–∑–º–µ—Ä–æ–º \(partData.count) –±–∞–π—Ç")
            
            // –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —á–∞—Å—Ç–∏ (–¥–≤–æ–π–Ω–æ–π CRLF)
            let doubleCRLF = Data([0x0D, 0x0A, 0x0D, 0x0A]) // \r\n\r\n
            
            guard let headerEndIndex = find(pattern: doubleCRLF, in: partData) else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —á–∞—Å—Ç–∏ #\(i+1)")
                continue
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            let headersData = partData.prefix(headerEndIndex)
            guard let headersString = String(data: headersData, encoding: .utf8) else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á–∞—Å—Ç–∏ #\(i+1)")
                continue
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
            var headers: [String: String] = [:]
            
            let headerLines = headersString.components(separatedBy: "\r\n")
            for line in headerLines where !line.isEmpty {
                let headerComponents = line.components(separatedBy: ": ")
                if headerComponents.count >= 2 {
                    let key = headerComponents[0]
                    let value = headerComponents.dropFirst().joined(separator: ": ")
                    headers[key] = value
                }
            }
            
            print("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —á–∞—Å—Ç–∏ #\(i+1):")
            for (key, value) in headers {
                print("   \(key): \(value)")
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ –∏–∑ Content-Disposition
            guard let contentDisposition = headers["Content-Disposition"],
                  let fieldName = extractFieldName(from: contentDisposition) else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition")
                continue
            }
            
            print("üìã –ò–º—è –ø–æ–ª—è: \(fieldName)")
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            let filename = extractFilename(from: contentDisposition)
            if let filename = filename {
                print("üìã –ò–º—è —Ñ–∞–π–ª–∞: \(filename)")
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Å—Ç–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            let contentStartIndex = headerEndIndex + doubleCRLF.count
            
            if contentStartIndex < partData.count {
                let contentData = partData.subdata(in: contentStartIndex..<partData.count)
                print("üìã –†–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª—è \(fieldName): \(contentData.count) –±–∞–π—Ç")
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
                processFieldContent(fieldName: fieldName, data: contentData, request: &request)
            } else {
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–ª—è \(fieldName)")
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
        if let audioData = request.audioData, !audioData.isEmpty {
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º \(audioData.count) –±–∞–π—Ç")
        } else {
            print("‚ùå –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ")
        }
        
        return request
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
    /// - Parameter contentDisposition: –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
    /// - Returns: –ò–º—è –ø–æ–ª—è –∏–ª–∏ nil, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    private func extractFieldName(from contentDisposition: String) -> String? {
        guard let nameMatch = contentDisposition.range(of: "name=\"([^\"]+)\"", options: .regularExpression) else {
            return nil
        }
        
        let nameStart = contentDisposition.index(nameMatch.lowerBound, offsetBy: 6)
        let nameEnd = contentDisposition.index(nameMatch.upperBound, offsetBy: -1)
        return String(contentDisposition[nameStart..<nameEnd])
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
    /// - Parameter contentDisposition: –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
    /// - Returns: –ò–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ nil, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    private func extractFilename(from contentDisposition: String) -> String? {
        guard let filenameMatch = contentDisposition.range(of: "filename=\"([^\"]+)\"", options: .regularExpression) else {
            return nil
        }
        
        let filenameStart = contentDisposition.index(filenameMatch.lowerBound, offsetBy: 10)
        let filenameEnd = contentDisposition.index(filenameMatch.upperBound, offsetBy: -1)
        return String(contentDisposition[filenameStart..<filenameEnd])
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    /// - Parameters:
    ///   - fieldName: –ò–º—è –ø–æ–ª—è
    ///   - data: –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    ///   - request: –ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    private func processFieldContent(fieldName: String, data: Data, request: inout WhisperAPIRequest) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç)
        let previewSize = min(20, data.count)
        if let textPreview = String(data: data.prefix(previewSize), encoding: .utf8) {
            print("üîç –ù–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ \(fieldName) (—Ç–µ–∫—Å—Ç): \(textPreview)")
        } else {
            print("üîç –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è \(fieldName)")
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
        switch fieldName {
        case "file":
            request.audioData = data
            let sizeMB = Double(data.count) / 1024.0 / 1024.0
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–æ–º \(data.count) –±–∞–π—Ç (\(String(format: "%.2f", sizeMB)) MB)")
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
            if data.count < 1000 {
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª (\(data.count) –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã")
            } else if data.count > 5 * 1024 * 1024 {
                print("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (\(String(format: "%.2f", sizeMB)) MB)")
            }
            
        case "prompt":
            if let textValue = String(data: data, encoding: .utf8) {
                let prompt = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
                request.prompt = prompt
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: \(prompt)")
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            }
            
        case "response_format":
            if let textValue = String(data: data, encoding: .utf8) {
                let format = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
                request.responseFormat = ResponseFormat.from(string: format)
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: \(format)")
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            }
            
        case "temperature":
            if let textValue = String(data: data, encoding: .utf8),
               let temp = Double(textValue.trimmingCharacters(in: .whitespacesAndNewlines)) {
                request.temperature = temp
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: \(temp)")
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–∞–∫ —á–∏—Å–ª–æ")
            }
            
        case "language":
            if let textValue = String(data: data, encoding: .utf8) {
                let language = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
                request.language = language
                print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: \(language)")
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —è–∑—ã–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            }
            
        case "model":
            if let textValue = String(data: data, encoding: .utf8) {
                let model = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –º–æ–¥–µ–ª—å: \(model) (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)")
                // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            }
            
        default:
            if let textValue = String(data: data, encoding: .utf8) {
                print("üìù –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–µ: \(fieldName) = \(textValue.prefix(50))")
            } else {
                print("üìù –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –ø–æ–ª–µ: \(fieldName) —Ä–∞–∑–º–µ—Ä–æ–º \(data.count) –±–∞–π—Ç")
            }
        }
    }
    
    // MARK: - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - format: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (json, text –∏ —Ç.–¥.)
    ///   - text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    ///   - temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    private func sendTranscriptionResponse(
        to connection: NWConnection, 
        format: ResponseFormat, 
        text: String,
        temperature: Double
    ) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        let (contentType, responseBody) = createResponseBody(format: format, text: text, temperature: temperature)
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ \(format.rawValue) (\(contentType))")
        
        // –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        let responseSizeKB = Double(responseBody.utf8.count) / 1024.0
        print("üì§ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: \(responseBody.utf8.count) –±–∞–π—Ç (\(String(format: "%.2f", responseSizeKB)) KB)")
        
        // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let previewLength = min(50, text.count)
        let textPreview = text.prefix(previewLength)
        print("üìù –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞: \"\(textPreview)\(text.count > previewLength ? "..." : "")\"")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP-–æ—Ç–≤–µ—Ç
        sendHTTPResponse(
            to: connection,
            statusCode: 200,
            statusMessage: "OK",
            contentType: contentType,
            body: responseBody,
            onSuccess: { print("‚úÖ –û—Ç–≤–µ—Ç API Whisper —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") }
        )
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    /// - Parameters:
    ///   - format: –¢—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    ///   - text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    ///   - temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    /// - Returns: –ö–æ—Ä—Ç–µ–∂ —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–ª–æ–º –æ—Ç–≤–µ—Ç–∞
    private func createResponseBody(format: ResponseFormat, text: String, temperature: Double = 0.0) -> (contentType: String, body: String) {
        switch format {
        case .json:
            let jsonResponse: [String: Any] = ["text": text]
            
            if let jsonData = try? JSONSerialization.data(withJSONObject: jsonResponse),
               let jsonString = String(data: jsonData, encoding: .utf8) {
                return ("application/json", jsonString)
            } else {
                return ("application/json", "{\"text\": \"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON-–æ—Ç–≤–µ—Ç–∞\"}")
            }
            
        case .verbose_json:
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            let words = text.components(separatedBy: " ")
            let halfIndex = max(1, words.count / 2)
            let firstSegment = words[0..<halfIndex].joined(separator: " ")
            let secondSegment = words[halfIndex..<words.count].joined(separator: " ")
            
            // –û—Ü–µ–Ω–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            let estimatedDuration = Double(text.count) / 20.0 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            
            let verboseResponse: [String: Any] = [
                "task": "transcribe",
                "language": "auto", // –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                "duration": estimatedDuration,
                "text": text,
                "segments": [
                    [
                        "id": 0,
                        "seek": 0,
                        "start": 0.0,
                        "end": estimatedDuration / 2.0,
                        "text": firstSegment,
                        "tokens": [50364, 13, 11, 263, 6116],
                        "temperature": temperature,
                        "avg_logprob": -0.45,
                        "compression_ratio": 1.275,
                        "no_speech_prob": 0.1
                    ],
                    [
                        "id": 1,
                        "seek": 500,
                        "start": estimatedDuration / 2.0,
                        "end": estimatedDuration,
                        "text": secondSegment,
                        "tokens": [50364, 13, 11, 263, 6116],
                        "temperature": temperature,
                        "avg_logprob": -0.45,
                        "compression_ratio": 1.275,
                        "no_speech_prob": 0.1
                    ]
                ]
            ]
            
            if let jsonData = try? JSONSerialization.data(withJSONObject: verboseResponse),
               let jsonString = String(data: jsonData, encoding: .utf8) {
                return ("application/json", jsonString)
            } else {
                return ("application/json", "{\"text\": \"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞\"}")
            }
            
        case .text:
            return ("text/plain", text)
            
        case .srt:
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            let words = text.components(separatedBy: " ")
            let halfIndex = max(1, words.count / 2)
            let firstSegment = words[0..<halfIndex].joined(separator: " ")
            let secondSegment = words[halfIndex..<words.count].joined(separator: " ")
            
            let estimatedDuration = Double(text.count) / 20.0 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            let midpoint = estimatedDuration / 2.0
            
            let srtText = """
            1
            00:00:00,000 --> 00:00:\(String(format: "%.3f", midpoint).replacingOccurrences(of: ".", with: ","))000
            \(firstSegment)
            
            2
            00:00:\(String(format: "%.3f", midpoint).replacingOccurrences(of: ".", with: ","))000 --> 00:00:\(String(format: "%.3f", estimatedDuration).replacingOccurrences(of: ".", with: ","))000
            \(secondSegment)
            """
            return ("text/plain", srtText)
            
        case .vtt:
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            let words = text.components(separatedBy: " ")
            let halfIndex = max(1, words.count / 2)
            let firstSegment = words[0..<halfIndex].joined(separator: " ")
            let secondSegment = words[halfIndex..<words.count].joined(separator: " ")
            
            let estimatedDuration = Double(text.count) / 20.0 // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            let midpoint = estimatedDuration / 2.0
            
            let vttText = """
            WEBVTT
            
            00:00:00.000 --> 00:00:\(String(format: "%.3f", midpoint))
            \(firstSegment)
            
            00:00:\(String(format: "%.3f", midpoint)) --> 00:00:\(String(format: "%.3f", estimatedDuration))
            \(secondSegment)
            """
            return ("text/plain", vttText)
        }
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    private func sendErrorResponse(to connection: NWConnection, message: String) {
        let errorResponse: [String: Any] = [
            "error": [
                "message": message,
                "type": "invalid_request_error"
            ]
        ]
        
        var responseBody = "{\"error\": {\"message\": \"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\"}}"
        if let jsonData = try? JSONSerialization.data(withJSONObject: errorResponse),
           let jsonString = String(data: jsonData, encoding: .utf8) {
            responseBody = jsonString
        }
        
        sendHTTPResponse(
            to: connection,
            statusCode: 400,
            statusMessage: "Bad Request",
            contentType: "application/json",
            body: responseBody,
            onSuccess: { print("‚úÖ –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") }
        )
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç "OK"
    /// - Parameter connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    private func sendDefaultResponse(to connection: NWConnection) {
        sendHTTPResponse(
            to: connection,
            statusCode: 200,
            statusMessage: "OK",
            contentType: "text/plain",
            body: "OK",
            onSuccess: { print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") }
        )
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - statusCode: –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ HTTP
    ///   - statusMessage: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ HTTP
    ///   - contentType: –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    ///   - body: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    ///   - onSuccess: –ó–∞–º—ã–∫–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    private func sendHTTPResponse(
        to connection: NWConnection,
        statusCode: Int,
        statusMessage: String,
        contentType: String,
        body: String,
        onSuccess: @escaping () -> Void
    ) {
        let contentLength = body.utf8.count
        let response = """
        HTTP/1.1 \(statusCode) \(statusMessage)
        Content-Type: \(contentType)
        Content-Length: \(contentLength)
        Connection: close
        
        \(body)
        """
        
        let responseData = Data(response.utf8)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        if case .cancelled = connection.state {
            print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return
        }
        
        if case .failed(_) = connection.state {
            print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ—à–∏–±–æ—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return
        }
        
        // –û–ø—Ä–µ–¥–µ–ª–∏–º timeout –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞. –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
        let timeoutSeconds: TimeInterval = min(5.0, Double(contentLength) / 10000 + 1.0)
        print("üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞: \(String(format: "%.1f", timeoutSeconds)) —Å–µ–∫—É–Ω–¥")
        
        connection.send(content: responseData, completion: .contentProcessed { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: \(error.localizedDescription)")
            } else {
                onSuccess()
                print("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: \(contentLength) –±–∞–π—Ç")
            }
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            DispatchQueue.main.asyncAfter(deadline: .now() + timeoutSeconds) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if case .cancelled = connection.state {
                    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ
                    return
                }
                
                print("üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                connection.cancel()
            }
        })
    }
} 