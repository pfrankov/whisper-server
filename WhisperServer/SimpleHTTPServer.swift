//
//  SimpleHTTPServer.swift
//  WhisperServer
//
//  Created by Frankov Pavel on 24.03.2025.
//

import Foundation
import Network

/// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Whisper API –∑–∞–ø—Ä–æ—Å–æ–≤
final class SimpleHTTPServer {
    // MARK: - Types
    
    /// –§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ API
    private enum ResponseFormat: String {
        case json, text, srt, vtt, verbose_json
        
        static func from(string: String?) -> ResponseFormat {
            guard let string = string, !string.isEmpty else { return .json }
            return ResponseFormat(rawValue: string) ?? .json
        }
    }
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ Whisper API
    private struct WhisperAPIRequest {
        var audioData: Data?
        var prompt: String?
        var responseFormat: ResponseFormat = .json
        var temperature: Double = 0.0
        var language: String?
        
        var isValid: Bool {
            return audioData != nil && !audioData!.isEmpty
        }
    }
    
    // MARK: - Properties
    
    /// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    private let port: UInt16
    
    /// –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    private(set) var isRunning = false
    
    /// –°–µ—Ç–µ–≤–æ–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private var listener: NWListener?
    
    /// –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–∞
    private let serverQueue = DispatchQueue(label: "com.whisperserver.server", qos: .userInitiated)
    
    // MARK: - Initialization
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    /// - Parameter port: –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    init(port: UInt16) {
        self.port = port
    }
    
    deinit {
        stop()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä
    func start() {
        guard !isRunning else { return }
        
        do {
            // –°–æ–∑–¥–∞–µ–º TCP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            let parameters = NWParameters.tcp
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç –∏–∑ UInt16
            let port = NWEndpoint.Port(rawValue: self.port)!
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –ø–æ—Ä—Ç–æ–º
            listener = try NWListener(using: parameters, on: port)
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            configureStateHandler()
            configureConnectionHandler()
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            listener?.start(queue: serverQueue)
            
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä: \(error.localizedDescription)")
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä
    func stop() {
        guard isRunning else { return }
        
        isRunning = false
        listener?.cancel()
        listener = nil
        print("üõë HTTP-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–ª—É—à–∞—Ç–µ–ª—è
    private func configureStateHandler() {
        listener?.stateUpdateHandler = { [weak self] state in
            guard let self = self else { return }
            
            switch state {
            case .ready:
                self.isRunning = true
                print("‚úÖ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:\(self.port)")
                print("   Whisper API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:\(self.port)/v1/audio/transcriptions")
                
            case .failed(let error):
                print("‚ùå HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: \(error.localizedDescription)")
                self.stop()
                
            case .cancelled:
                self.isRunning = false
                
            default:
                break
            }
        }
    }
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private func configureConnectionHandler() {
        listener?.newConnectionHandler = { [weak self] connection in
            guard let self = self else { return }
            self.handleConnection(connection)
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    /// - Parameter connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private func handleConnection(_ connection: NWConnection) {
        connection.stateUpdateHandler = { [weak self] state in
            guard let self = self else { return }
            
            switch state {
            case .ready:
                self.receiveData(from: connection)
                
            case .failed(let error):
                print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: \(error.localizedDescription)")
                connection.cancel()
                
            default:
                break
            }
        }
        
        connection.start(queue: serverQueue)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    /// - Parameter connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    private func receiveData(from connection: NWConnection) {
        connection.receive(minimumIncompleteLength: 1, maximumLength: 65536) { [weak self] data, _, isComplete, error in
            guard let self = self else { return }
            
            defer {
                if isComplete {
                    connection.cancel()
                }
            }
            
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
                connection.cancel()
                return
            }
            
            guard let data = data else { return }
            
            if let request = self.parseHTTPRequest(data: data) {
                self.routeRequest(connection: connection, request: request)
            } else {
                self.sendDefaultResponse(to: connection)
            }
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    /// –†–∞–∑–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞
    /// - Parameter data: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    /// - Returns: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ nil, –µ—Å–ª–∏ —Ä–∞–∑–±–æ—Ä –Ω–µ —É–¥–∞–ª—Å—è
    private func parseHTTPRequest(data: Data) -> [String: Any]? {
        guard let requestString = String(data: data, encoding: .utf8) else {
            return nil
        }
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        let lines = requestString.components(separatedBy: "\r\n")
        guard !lines.isEmpty else { return nil }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
        let requestLine = lines[0].components(separatedBy: " ")
        guard requestLine.count >= 3 else { return nil }
        
        let method = requestLine[0]
        let path = requestLine[1]
        
        // –†–∞–∑–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        var headers: [String: String] = [:]
        var i = 1
        
        while i < lines.count && !lines[i].isEmpty {
            let headerComponents = lines[i].components(separatedBy: ": ")
            if headerComponents.count >= 2 {
                let key = headerComponents[0]
                let value = headerComponents.dropFirst().joined(separator: ": ")
                headers[key] = value
            }
            i += 1
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–ª–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        var body: Data?
        if i < lines.count - 1 {
            let bodyStartIndex = requestString.distance(
                from: requestString.startIndex,
                to: requestString.range(of: "\r\n\r\n")?.upperBound ?? requestString.endIndex
            )
            
            if bodyStartIndex < requestString.count {
                let bodyRange = data.index(data.startIndex, offsetBy: bodyStartIndex)..<data.endIndex
                body = data.subdata(in: bodyRange)
            }
        }
        
        return [
            "method": method,
            "path": path,
            "headers": headers,
            "body": body ?? Data()
        ]
    }
    
    /// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - request: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å
    private func routeRequest(connection: NWConnection, request: [String: Any]) {
        guard 
            let method = request["method"] as? String,
            let path = request["path"] as? String
        else {
            sendDefaultResponse(to: connection)
            return
        }
        
        print("üì• –ü–æ–ª—É—á–µ–Ω \(method) –∑–∞–ø—Ä–æ—Å: \(path)")
        
        if path.hasSuffix("/v1/audio/transcriptions") {
            handleTranscriptionRequest(connection: connection, request: request)
        } else {
            sendDefaultResponse(to: connection)
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - request: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å
    private func handleTranscriptionRequest(connection: NWConnection, request: [String: Any]) {
        guard 
            let headers = request["headers"] as? [String: String],
            let contentTypeHeader = headers["Content-Type"],
            let body = request["body"] as? Data
        else {
            sendErrorResponse(to: connection, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        }
        
        if !contentTypeHeader.starts(with: "multipart/form-data") {
            sendErrorResponse(to: connection, message: "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å multipart/form-data")
            return
        }
        
        let whisperRequest = parseMultipartFormData(data: body, contentType: contentTypeHeader)
        
        if whisperRequest.isValid {
            sendTranscriptionResponse(to: connection, format: whisperRequest.responseFormat)
        } else {
            sendErrorResponse(to: connection, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        }
    }
    
    // MARK: - –û–±—Ä–∞–±–æ—Ç–∫–∞ multipart/form-data
    
    /// –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ multipart/form-data
    /// - Parameters:
    ///   - data: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ multipart –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    ///   - contentType: –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Type
    /// - Returns: WhisperAPIRequest, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    private func parseMultipartFormData(data: Data, contentType: String) -> WhisperAPIRequest {
        var request = WhisperAPIRequest()
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∏–∑ Content-Type
        let boundaryComponents = contentType.components(separatedBy: "boundary=")
        guard boundaryComponents.count > 1 else {
            print("‚ùå –ì—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Content-Type")
            return request
        }
        
        let boundary = boundaryComponents[1]
        let fullBoundary = "--\(boundary)".data(using: .utf8)!
        let endBoundary = "--\(boundary)--".data(using: .utf8)!
        
        // –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        let scanner = BinaryDataScanner(data: data)
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        while !scanner.isAtEnd {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
            _ = scanner.scanUpTo(fullBoundary)
            if scanner.isAtEnd { break }
            
            // –ù–∞–π–¥–µ–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–µ –∏ CRLF
            scanner.skip(fullBoundary.count)
            scanner.skipCRLF()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π
            if scanner.peek(endBoundary.count) == endBoundary {
                break
            }
            
            // –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            let headers = readHeaders(scanner: scanner)
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—è –∏ –∏–º—è —Ñ–∞–π–ª–∞
            guard let (fieldName, filename) = extractFieldInfo(from: headers) else {
                continue
            }
            
            if let filename = filename {
                print("üì§ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: \(filename)")
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Å—Ç–∏
            processPartContent(scanner: scanner, fieldName: fieldName, boundary: fullBoundary, request: &request)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
        if let audioData = request.audioData, !audioData.isEmpty {
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º \(audioData.count) –±–∞–π—Ç")
        } else {
            print("‚ùå –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ")
        }
        
        return request
    }
    
    /// –ß–∏—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Å–∫–∞–Ω–µ—Ä–∞
    /// - Parameter scanner: –ë–∏–Ω–∞—Ä–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    /// - Returns: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    private func readHeaders(scanner: BinaryDataScanner) -> [String: String] {
        var headers = [String: String]()
        
        while true {
            guard let line = scanner.scanLine(), !line.isEmpty else { break }
            
            let components = line.components(separatedBy: ": ")
            if components.count >= 2 {
                let key = components[0]
                let value = components.dropFirst().joined(separator: ": ")
                headers[key] = value
            }
        }
        
        return headers
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    /// - Parameter headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    /// - Returns: –ö–æ—Ä—Ç–µ–∂ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
    private func extractFieldInfo(from headers: [String: String]) -> (fieldName: String, filename: String?)? {
        guard let contentDisposition = headers["Content-Disposition"] else {
            return nil
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—è
        guard let nameMatch = contentDisposition.range(of: "name=\"([^\"]+)\"", options: .regularExpression) else {
            return nil
        }
        
        let nameStart = contentDisposition.index(nameMatch.lowerBound, offsetBy: 6)
        let nameEnd = contentDisposition.index(nameMatch.upperBound, offsetBy: -1)
        let fieldName = String(contentDisposition[nameStart..<nameEnd])
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        var filename: String?
        if let filenameMatch = contentDisposition.range(of: "filename=\"([^\"]+)\"", options: .regularExpression) {
            let filenameStart = contentDisposition.index(filenameMatch.lowerBound, offsetBy: 10)
            let filenameEnd = contentDisposition.index(filenameMatch.upperBound, offsetBy: -1)
            filename = String(contentDisposition[filenameStart..<filenameEnd])
        }
        
        return (fieldName, filename)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Å—Ç–∏ multipart/form-data
    /// - Parameters:
    ///   - scanner: –ë–∏–Ω–∞—Ä–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    ///   - fieldName: –ò–º—è –ø–æ–ª—è
    ///   - boundary: –ì—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–∏
    ///   - request: –ó–∞–ø—Ä–æ—Å Whisper API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    private func processPartContent(scanner: BinaryDataScanner, fieldName: String, boundary: Data, request: inout WhisperAPIRequest) {
        let startPos = scanner.position
        
        // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –≥—Ä–∞–Ω–∏—Ü—É
        guard let nextBoundaryPos = scanner.position(of: boundary) else {
            return
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –∏—Å–∫–ª—é—á–∞—è CRLF –ø–µ—Ä–µ–¥ –≥—Ä–∞–Ω–∏—Ü–µ–π
        let contentLength = nextBoundaryPos - startPos - 2 // -2 –¥–ª—è CRLF
        let contentData = scanner.data.subdata(in: startPos..<(startPos + contentLength))
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π
        switch fieldName {
        case "file":
            request.audioData = contentData
            
        case "prompt":
            if let textValue = String(data: contentData, encoding: .utf8) {
                request.prompt = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
            }
            
        case "response_format":
            if let textValue = String(data: contentData, encoding: .utf8) {
                let format = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
                request.responseFormat = ResponseFormat.from(string: format)
            }
            
        case "temperature":
            if let textValue = String(data: contentData, encoding: .utf8),
               let temp = Double(textValue.trimmingCharacters(in: .whitespacesAndNewlines)) {
                request.temperature = temp
            }
            
        case "language":
            if let textValue = String(data: contentData, encoding: .utf8) {
                request.language = textValue.trimmingCharacters(in: .whitespacesAndNewlines)
            }
            
        default:
            if let textValue = String(data: contentData, encoding: .utf8) {
                print("üìù –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–µ: \(fieldName) = \(textValue.prefix(50))")
            } else {
                print("üìù –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –±–∏–Ω–∞—Ä–Ω–æ–µ –ø–æ–ª–µ: \(fieldName)")
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–∫–∞–Ω–µ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞–Ω–∏—Ü—ã
        scanner.position = nextBoundaryPos
    }
    
    // MARK: - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - format: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (json, text –∏ —Ç.–¥.)
    private func sendTranscriptionResponse(to connection: NWConnection, format: ResponseFormat) {
        let sampleText = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ."
        let (contentType, responseBody) = createResponseBody(format: format, text: sampleText)
        
        sendHTTPResponse(
            to: connection,
            statusCode: 200,
            statusMessage: "OK",
            contentType: contentType,
            body: responseBody,
            onSuccess: { print("‚úÖ –û—Ç–≤–µ—Ç API Whisper —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") }
        )
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    /// - Parameters:
    ///   - format: –¢—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    ///   - text: –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// - Returns: –ö–æ—Ä—Ç–µ–∂ —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–ª–æ–º –æ—Ç–≤–µ—Ç–∞
    private func createResponseBody(format: ResponseFormat, text: String) -> (contentType: String, body: String) {
        switch format {
        case .json:
            let jsonResponse: [String: Any] = ["text": text]
            
            if let jsonData = try? JSONSerialization.data(withJSONObject: jsonResponse),
               let jsonString = String(data: jsonData, encoding: .utf8) {
                return ("application/json", jsonString)
            } else {
                return ("application/json", "{\"text\": \"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON-–æ—Ç–≤–µ—Ç–∞\"}")
            }
            
        case .verbose_json:
            let verboseResponse: [String: Any] = [
                "task": "transcribe",
                "language": "ru",
                "duration": 10.5,
                "text": text,
                "segments": [
                    [
                        "id": 0,
                        "seek": 0,
                        "start": 0.0,
                        "end": 5.0,
                        "text": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä",
                        "tokens": [50364, 13, 11, 263, 6116],
                        "temperature": 0.0,
                        "avg_logprob": -0.45,
                        "compression_ratio": 1.275,
                        "no_speech_prob": 0.1
                    ],
                    [
                        "id": 1,
                        "seek": 500,
                        "start": 5.0,
                        "end": 10.0,
                        "text": "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.",
                        "tokens": [50364, 13, 11, 263, 6116],
                        "temperature": 0.0,
                        "avg_logprob": -0.45,
                        "compression_ratio": 1.275,
                        "no_speech_prob": 0.1
                    ]
                ]
            ]
            
            if let jsonData = try? JSONSerialization.data(withJSONObject: verboseResponse),
               let jsonString = String(data: jsonData, encoding: .utf8) {
                return ("application/json", jsonString)
            } else {
                return ("application/json", "{\"text\": \"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞\"}")
            }
            
        case .text:
            return ("text/plain", text)
            
        case .srt:
            let srtText = """
            1
            00:00:00,000 --> 00:00:05,000
            –≠—Ç–æ –ø—Ä–∏–º–µ—Ä
            
            2
            00:00:05,000 --> 00:00:10,000
            —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.
            """
            return ("text/plain", srtText)
            
        case .vtt:
            let vttText = """
            WEBVTT
            
            00:00:00.000 --> 00:00:05.000
            –≠—Ç–æ –ø—Ä–∏–º–µ—Ä
            
            00:00:05.000 --> 00:00:10.000
            —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.
            """
            return ("text/plain", vttText)
        }
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    private func sendErrorResponse(to connection: NWConnection, message: String) {
        let errorResponse: [String: Any] = [
            "error": [
                "message": message,
                "type": "invalid_request_error"
            ]
        ]
        
        var responseBody = "{\"error\": {\"message\": \"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\"}}"
        if let jsonData = try? JSONSerialization.data(withJSONObject: errorResponse),
           let jsonString = String(data: jsonData, encoding: .utf8) {
            responseBody = jsonString
        }
        
        sendHTTPResponse(
            to: connection,
            statusCode: 400,
            statusMessage: "Bad Request",
            contentType: "application/json",
            body: responseBody,
            onSuccess: { print("‚úÖ –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") }
        )
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç "OK"
    /// - Parameter connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    private func sendDefaultResponse(to connection: NWConnection) {
        sendHTTPResponse(
            to: connection,
            statusCode: 200,
            statusMessage: "OK",
            contentType: "text/plain",
            body: "OK",
            onSuccess: { print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω") }
        )
    }
    
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    /// - Parameters:
    ///   - connection: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ///   - statusCode: –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ HTTP
    ///   - statusMessage: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ HTTP
    ///   - contentType: –¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    ///   - body: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    ///   - onSuccess: –ó–∞–º—ã–∫–∞–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    private func sendHTTPResponse(
        to connection: NWConnection,
        statusCode: Int,
        statusMessage: String,
        contentType: String,
        body: String,
        onSuccess: @escaping () -> Void
    ) {
        let contentLength = body.utf8.count
        let response = """
        HTTP/1.1 \(statusCode) \(statusMessage)
        Content-Type: \(contentType)
        Content-Length: \(contentLength)
        Connection: close
        
        \(body)
        """
        
        let responseData = Data(response.utf8)
        
        connection.send(content: responseData, completion: .contentProcessed { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: \(error.localizedDescription)")
            } else {
                onSuccess()
            }
            
            connection.cancel()
        })
    }
}

// MARK: - BinaryDataScanner

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
private class BinaryDataScanner {
    let data: Data
    var position: Int = 0
    
    var isAtEnd: Bool {
        return position >= data.count
    }
    
    init(data: Data) {
        self.data = data
    }
    
    func peek(_ length: Int) -> Data? {
        guard position + length <= data.count else { return nil }
        return data.subdata(in: position..<(position + length))
    }
    
    func skip(_ length: Int) {
        position = min(position + length, data.count)
    }
    
    func skipCRLF() {
        if position + 2 <= data.count && data[position] == 13 && data[position + 1] == 10 {
            position += 2
        }
    }
    
    func scanLine() -> String? {
        let startPos = position
        
        while position < data.count {
            if position + 1 < data.count && data[position] == 13 && data[position + 1] == 10 {
                let line = String(data: data.subdata(in: startPos..<position), encoding: .utf8) ?? ""
                position += 2  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º CRLF
                return line
            }
            position += 1
        }
        
        return nil
    }
    
    func scanUpTo(_ pattern: Data) -> Data? {
        let startPos = position
        
        while position <= data.count - pattern.count {
            var found = true
            for i in 0..<pattern.count {
                if data[position + i] != pattern[i] {
                    found = false
                    break
                }
            }
            
            if found {
                return data.subdata(in: startPos..<position)
            }
            
            position += 1
        }
        
        position = data.count
        return nil
    }
    
    func position(of pattern: Data) -> Int? {
        var searchPos = position
        
        while searchPos <= data.count - pattern.count {
            var found = true
            for i in 0..<pattern.count {
                if data[searchPos + i] != pattern[i] {
                    found = false
                    break
                }
            }
            
            if found {
                return searchPos
            }
            
            searchPos += 1
        }
        
        return nil
    }
} 